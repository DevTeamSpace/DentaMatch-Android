buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.22.1'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'realm-android'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
def serverConfigPropertiesFile = rootProject.file("serverConfig.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
def serverProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
serverProperties.load(new FileInputStream(serverConfigPropertiesFile))
android {

    configurations.all {
        resolutionStrategy.force 'com.android.support:support-v4:27.0.2'
    }
    dexOptions {
        javaMaxHeapSize "4g"
        incremental true
    }
    dataBinding {
        enabled true;
    }

    compileSdkVersion 27
    buildToolsVersion '27.0.2'


    defaultConfig {
        applicationId "com.appster.dentamatch"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }

    //Build types of App
    buildTypes {
        release {
            lintOptions {
                disable 'MissingTranslation'
            }
            debuggable true
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false

           /* shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'*/
        }
    }

    /*applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.replace('.apk', "-${versionName}.apk")
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }*/

    //Signing config for release build
    signingConfigs {
        config {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    flavorDimensions "environment"
    productFlavors {
        Dev {
            dimension "environment"
            buildConfigField("String", "BASE_URL", '"https://dev.dentamatch.co/api/"')
            buildConfigField("String", "CHAT_URL", '"http://dev.dentamatch.co:3000"')
            minSdkVersion 19
            signingConfig signingConfigs.config
        }
        QA {
            dimension "environment"
            buildConfigField("String", "BASE_URL", '"https://qa.dentamatch.co/api/"')
            //buildConfigField("String", "CHAT_URL", '"http://qa.dentamatch.co:3000"')
            buildConfigField("String", "CHAT_URL", '"https://qanode.dentamatch.co:8443"')

            minSdkVersion 19
            signingConfig signingConfigs.config
        }
        Staging {
            dimension "environment"
            buildConfigField("String", "BASE_URL", '"https://staging.dentamatch.co/api/"')
            buildConfigField("String", "CHAT_URL", '"https://staging.dentamatch.co:8443"')
            minSdkVersion 19
            signingConfig signingConfigs.config
        }
        Production {
            dimension "environment"
            buildConfigField("String", "BASE_URL", '"https://production.dentamach/api/"')
            buildConfigField("String", "CHAT_URL", '"https://staging.dentamatch.co:8443"')

            minSdkVersion 19
            signingConfig signingConfigs.config

        }
    }

    return void;
}

ext {
    //supportLibrary Version
    supportLibrary = '27.0.2'

    //Play services Version
    playServiceVersion = '11.8.0'

    //fireBase Version
    fireBaseLibrary = '11.8.0'

    //leakCanary Version
    leakCanaryLibrary = '1.5'

    //Retrofit Version
    retrofitVersion = '2.1.0'

    //Build tools  Version
//    buildToolsVersion '23.0.1'

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.google.maps.android:android-maps-utils:0.4'
    //Firebase libs
    compile "com.google.firebase:firebase-messaging:${fireBaseLibrary}"
    //Google Support libs
    compile "com.android.support:design:${supportLibrary}"
    compile "com.android.support:recyclerview-v7:${supportLibrary}"
    compile "com.android.support:cardview-v7:${supportLibrary}"
    compile "com.android.support:appcompat-v7:${supportLibrary}"
    compile "com.android.support:support-annotations:${supportLibrary}"
    compile 'com.android.support:multidex:1.0.1'
    //Google Play service libs
    compile "com.google.android.gms:play-services-location:${playServiceVersion}"
    compile "com.google.android.gms:play-services-auth:${playServiceVersion}"
    compile "com.google.android.gms:play-services-maps:${playServiceVersion}"
    compile "com.google.android.gms:play-services-places:${playServiceVersion}"
    //Third party libs
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.aurelhubert:ahbottomnavigation:2.0.3'
    compile 'com.orhanobut:hawk:2.0.1'
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    testCompile 'junit:junit:4.12'
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'com.wefika:flowlayout:0.4.1'
    compile('io.socket:socket.io-client:0.8.1') {
        exclude group: 'org.json', module: 'json'
    }
    compile 'io.realm:android-adapters:1.4.0'
    compile 'com.mixpanel.android:mixpanel-android:4.9.8'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.7@aar') {
        transitive = true;
    }
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryLibrary"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryLibrary"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryLibrary"
    compile 'com.facebook.stetho:stetho-okhttp3:1.4.1'

    /*compile('com.android.support:appcompat-v7:22.2.0') {
        exclude module: 'support-v4'
    }*/

    //compile 'com.instabug.library:instabug:4.7.0'
    compile ('com.instabug.library:instabug:4.8.1'){
        exclude module: 'support-v4'
    }

}
// ADD THIS AT THE BOTTOM
apply plugin: 'com.google.gms.google-services'


apply plugin: "org.sonarqube"
sonarqube {
    properties {
        property "sonar.projectName", "DentaMatch_android"
        property "sonar.projectKey", "myproject:DentaMatch_android"
        property "sonar.host.url", "https://sonarqube.appster.in/sonar"
        //property "sonar.host.url", "http://54.152.88.149:9000/sonar"

        property "sonar.sources", "src/main"
        property "sonar.login", "admin"
        property "sonar.password", "admin"
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.profile', 'AllAndroid'
        property 'sonar.import_unknown_files', true
        property 'sonar.android.lint.report', 'build/reports/lint-results.xml'
    }
}
